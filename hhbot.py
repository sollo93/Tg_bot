import os
from dotenv import load_dotenv
import requests
from bs4 import BeautifulSoup
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, ConversationHandler,
    MessageHandler, filters, CallbackQueryHandler
)
import logging
import asyncio

# ========== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
load_dotenv()

# --- Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/117.0.0.0 Safari/537.36'
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler-–∞
SEARCH, SET_SALARY, SET_REGION = range(3)

# --- –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}

# --- –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
REGIONS = {
    '–†–æ—Å—Å–∏—è': '113',
    '–ú–æ—Å–∫–≤–∞': '1',
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': '2',
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': '4'
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def get_user(chat_id):
    if chat_id not in user_settings:
        user_settings[chat_id] = {
            'keywords': [
                '—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–±–µ–∑ –æ–ø—ã—Ç–∞', '–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤',
                '–º–∞–º–∞ –≤ –¥–µ–∫—Ä–µ—Ç–µ', '–∏–Ω–≤–∞–ª–∏–¥', '–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞'
            ],
            'salary': None,
            'region': '113',  # –†–æ—Å—Å–∏—è
            'page_hh': 0,
            'page_avito': 0
        }
    return user_settings[chat_id]

async def get_hh_jobs(keywords, salary=None, region='113', page=0):
    keywords_str = ' '.join(keywords)
    params = {
        'text': keywords_str,
        'area': region,
        'per_page': 5,
        'experience': 'noExperience',
        'schedule': 'remote',
        'page': page
    }
    if salary is not None:
        params['salary'] = salary
    try:
        resp = requests.get('https://api.hh.ru/vacancies', params=params, headers=HEADERS, timeout=10)
        resp.raise_for_status()
        await asyncio.sleep(1)
        jobs = []
        items = resp.json().get('items', [])
        for job in items:
            name = job.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            description = job.get('snippet', {}).get('requirement', '') + job.get('snippet', {}).get('responsibility', '')
            combined_text = (name + ' ' + description).lower()
            if any(kw.lower() in combined_text for kw in keywords):
                company = job.get('employer', {}).get('name', '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                url = job.get('alternate_url', '#')
                salary_s = "–ó–ü: –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                salary_field = job.get('salary')
                if salary_field:
                    if salary_field.get('from') and salary_field.get('to'):
                        salary_s = f"–ó–ü: {salary_field['from']} - {salary_field['to']} {salary_field.get('currency', '')}"
                    elif salary_field.get('from'):
                        salary_s = f"–ó–ü: –æ—Ç {salary_field['from']} {salary_field.get('currency', '')}"
                    elif salary_field.get('to'):
                        salary_s = f"–ó–ü: –¥–æ {salary_field['to']} {salary_field.get('currency', '')}"
                jobs.append(f"{name} | {company} | {salary_s} | {url}")
        return jobs
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ HH: {e}")
        return []

async def get_avito_jobs(keywords, page=0):
    query = '+'.join(keywords)
    url = f'https://www.avito.ru/all/vakansii?cd=1&q={query}&remote=1&p={page + 1}'
    try:
        resp = requests.get(url, headers=HEADERS, timeout=10)
        resp.raise_for_status()
        await asyncio.sleep(1)
        soup = BeautifulSoup(resp.content, 'html.parser')
        jobs = []
        ads = soup.find_all('div', {'data-marker': 'item'}, limit=5)
        for ad in ads:
            title_tag = ad.find('h3')
            if not title_tag:
                continue
            title = title_tag.text.strip()
            link_tag = ad.find('a', {'data-marker': 'item-title'})
            salary_tag = ad.find('span', {'data-marker': 'item-price'})
            link = 'https://www.avito.ru' + link_tag.get('href') if link_tag else '#'
            salary = salary_tag.text.strip() if salary_tag else '–ó–ü: –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            jobs.append(f"{title} | {salary} | {link}")
        return jobs
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ Avito: {e}")
        return []

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start - —Å—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞\n"
        "/search - –∑–∞–¥–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/salary - –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É\n"
        "/region - –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞\n"
        "/next - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
        "/prev - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)
    user['page_hh'] = 0
    user['page_avito'] = 0
    await update.message.reply_text(
        "–ü–æ–∏—Å–∫ —É–¥–∞–ª—ë–Ω–Ω–æ–π –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –æ–ø—ã—Ç–∞.\n"
        f"–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(user['keywords'])}\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å"
    )
    await send_jobs_now(chat_id, context)

async def search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    return SEARCH

async def search_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    keywords = list(set(text.lower().split()))
    user = get_user(chat_id)
    user['keywords'] = keywords
    user['page_hh'] = 0
    user['page_avito'] = 0
    await update.message.reply_text(f"–ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")
    await send_jobs_now(chat_id, context)
    return ConversationHandler.END

async def salary_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (—á–∏—Å–ª–æ), –ª–∏–±–æ 0 —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å:")
    return SET_SALARY

async def salary_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    try:
        salary = int(text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return SET_SALARY
    user = get_user(chat_id)
    user['salary'] = None if salary == 0 else salary
    user['page_hh'] = 0
    await update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary if salary > 0 else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    await send_jobs_now(chat_id, context)
    return ConversationHandler.END

async def region_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(region, callback_data=code)]
        for region, code in REGIONS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:', reply_markup=reply_markup)
    return SET_REGION

async def region_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    query = update.callback_query
    await query.answer()
    region_code = query.data
    region_name = [r for r, c in REGIONS.items() if c == region_code][0]
    user = get_user(chat_id)
    user['region'] = region_code
    user['page_hh'] = 0
    await query.edit_message_text(f"–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞: {region_name}")
    await send_jobs_now(chat_id, context)
    return ConversationHandler.END

async def send_jobs_now(chat_id, context):
    user = get_user(chat_id)
    msg = f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(user['keywords'])}\n–†–µ–≥–∏–æ–Ω: {next(r for r,c in REGIONS.items() if c == user['region'])}\n"
    if user['salary']:
        msg += f"–ú–∏–Ω. –∑–∞—Ä–ø–ª–∞—Ç–∞: {user['salary']}\n"
    else:
        msg += "–ú–∏–Ω. –∑–∞—Ä–ø–ª–∞—Ç–∞: –ª—é–±–∞—è\n"
    msg += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"

    jobs_hh = await get_hh_jobs(user['keywords'], user['salary'], user['region'], user['page_hh'])
    jobs_avito = await get_avito_jobs(user['keywords'], user['page_avito'])

    msg += "üíº hh.ru:\n"
    msg += "\n".join([f"üîπ {j}" for j in jobs_hh]) if jobs_hh else "‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π"
    msg += "\n\nüõí Avito:\n"
    msg += "\n".join([f"üî∏ {j}" for j in jobs_avito]) if jobs_avito else "‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π"
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"),
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="next"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text=msg, reply_markup=reply_markup, disable_web_page_preview=True)

async def pagination_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    query = update.callback_query
    await query.answer()
    user = get_user(chat_id)
    if query.data == "next":
        user['page_hh'] += 1
        user['page_avito'] += 1
    elif query.data == "prev" and user['page_hh'] > 0 and user['page_avito'] > 0:
        user['page_hh'] -= 1
        user['page_avito'] -= 1
    await send_jobs_now(chat_id, context)
    await query.delete_message()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END


if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))

    search_handler = ConversationHandler(
        entry_points=[CommandHandler('search', search_start)],
        states={SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_receive)]},
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    app.add_handler(search_handler)

    salary_handler = ConversationHandler(
        entry_points=[CommandHandler('salary', salary_start)],
        states={SET_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, salary_receive)]},
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    app.add_handler(salary_handler)

    region_handler = ConversationHandler(
        entry_points=[CommandHandler('region', region_command)],
        states={SET_REGION: [CallbackQueryHandler(region_receive)]},
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    app.add_handler(region_handler)

    app.add_handler(CallbackQueryHandler(pagination_callback, pattern='next|prev'))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start, /help, /search, /salary, /region ...")
    app.run_polling()
